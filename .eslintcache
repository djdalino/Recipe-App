[{"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/index.js":"1","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/App.js":"2","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/reportWebVitals.js":"3","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/recipe.jsx":"4","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/context/ContextWrapper.jsx":"5","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/context/HeaderContext.jsx":"6","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/recipeSingleView.jsx":"7","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/ingredients.jsx":"8","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/directions.jsx":"9","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Navbar/navbar.jsx":"10","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Cards/recipeCards.jsx":"11","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/recipeEdit.jsx":"12","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/recipeAdd.jsx":"13"},{"size":692,"mtime":1611324097753,"results":"14","hashOfConfig":"15"},{"size":776,"mtime":1611418162854,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1611295133206,"results":"17","hashOfConfig":"15"},{"size":457,"mtime":1611436430869,"results":"18","hashOfConfig":"15"},{"size":757,"mtime":1611435811915,"results":"19","hashOfConfig":"15"},{"size":114,"mtime":1611310834625,"results":"20","hashOfConfig":"15"},{"size":2099,"mtime":1611432418005,"results":"21","hashOfConfig":"15"},{"size":1348,"mtime":1611404184207,"results":"22","hashOfConfig":"15"},{"size":314,"mtime":1611373648913,"results":"23","hashOfConfig":"15"},{"size":1373,"mtime":1611444924435,"results":"24","hashOfConfig":"15"},{"size":802,"mtime":1611444958518,"results":"25","hashOfConfig":"15"},{"size":5254,"mtime":1611433837942,"results":"26","hashOfConfig":"15"},{"size":8154,"mtime":1611436106647,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1yesbc0",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/index.js",[],["57","58"],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/App.js",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/reportWebVitals.js",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/recipe.jsx",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/context/ContextWrapper.jsx",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/context/HeaderContext.jsx",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/recipeSingleView.jsx",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/ingredients.jsx",["59"],"import React, { useState, useEffect } from \"react\";\n\nconst Ingredients = ({ ingredients }) => {\n  const { name, amount, measurement, uuid } = ingredients;\n\n  const [specialData, setSpecialData] = useState([]);\n  useEffect(() => {\n    specialMatch();\n  }, []);\n  const specialMatch = async () => {\n    try {\n      const res = await fetch(`http://localhost:3001/specials`);\n      const data = await res.json();\n      const find = data.filter(item => item.ingredientId === uuid);\n\n      setSpecialData(find);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"d-flex  align-items-center\">\n        <p className=\"m-1\">{amount}</p>\n        <p className=\"m-1\">{measurement}</p>\n        <p className=\"m-1\">{name}</p>\n      </div>\n\n      <div className=\"m-1\">\n        {specialData.map((item, i) => {\n          return (\n            <div key={i}>\n              <span className=\"badge bg-primary fw-bold m-1\">\n                {item.title}{\" \"}\n              </span>\n              <span className=\"badge bg-primary fw-normal m-1\">\n                {item.type}{\" \"}\n              </span>\n              <span className=\"badge bg-primary fw-light m-1\">\n                {item.text}{\" \"}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Ingredients;\n","/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/directions.jsx",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Navbar/navbar.jsx",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Cards/recipeCards.jsx",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/recipeEdit.jsx",[],"/Users/hannaclaros/Desktop/dadada/React/recipe-app/src/components/Recipes/recipeAdd.jsx",["60","61","62","63","64","65"],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nconst RecipeAdd = () => {\n  const [inputs, setInputs] = useState([]);\n  const [instructions, setInstructions] = useState([]);\n  const [inputValues, setInputValues] = useState({});\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [serving, setServing] = useState(\"\");\n  const [prepTime, setPrepTime] = useState(\"\");\n  const [cookTime, setCookTime] = useState(\"\");\n\n  const handleOnChange = e => {\n    const { name, value } = e.target;\n    setInputValues({ ...inputValues, [name]: value });\n  };\n\n  const handleAddMoreIngredient = () => {\n    const amount = `amount-${inputs.length}`;\n    const measure = `measure-${inputs.length}`;\n    const name = `name-${inputs.length}`;\n\n    let inputBox = (\n      <div className=\"row mb-3 col-9 mx-auto\" key={inputs.length}>\n        <div className=\"col\">\n          <label htmlFor={amount} className=\"form-label\">\n            Amount\n          </label>\n          <input\n            type=\"text\"\n            name={amount}\n            className=\"form-control\"\n            id={amount}\n            onChange={handleOnChange}\n          />\n        </div>\n        <div className=\"col\">\n          <label htmlFor={measure} className=\"form-label\">\n            Measurement:\n          </label>\n          <input\n            type=\"text\"\n            name={measure}\n            className=\"form-control\"\n            id={measure}\n            onChange={handleOnChange}\n          />\n        </div>\n        <div className=\"col\">\n          <label htmlFor={name} className=\"form-label\">\n            Name:\n          </label>\n          <input\n            type=\"text\"\n            name={name}\n            className=\"form-control\"\n            id={name}\n            onChange={handleOnChange}\n          />\n        </div>\n      </div>\n    );\n\n    setInputs(prevState => [...prevState, inputBox]);\n  };\n\n  const handleMoreInstructions = () => {\n    console.log(\"clicked!\");\n    const instruction = `instructions-${instructions.length}`;\n    const optional = `optional-${instructions.length}`;\n\n    const instruct = (\n      <div className=\"row mb-3 col-9 mx-auto\">\n        <div className=\"col-9\">\n          <label htmlFor={instruction} className=\"form-label\">\n            Instructions:\n          </label>\n          <input\n            type=\"text\"\n            name={instruction}\n            className=\"form-control\"\n            id={instruction}\n            onChange={handleOnChange}\n          />\n        </div>\n        <div className=\"col-3\">\n          <label htmlFor={optional} className=\"form-label\">\n            Optional\n          </label>\n          <select\n            className=\"form-select\"\n            name={optional}\n            id={optional}\n            aria-label=\"Default select example\"\n            onChange={handleOnChange}\n          >\n            <option defaultValue>Open this select menu</option>\n            <option value=\"true\">True</option>\n            <option value=\"false\">False</option>\n          </select>\n        </div>\n      </div>\n    );\n\n    setInstructions(prevState => [...prevState, instruct]);\n  };\n\n  const handleOnSubmit = async e => {\n    e.preventDefault();\n\n    // try {\n    //   const data = new FormData();\n    //   data.append(\"title\", title);\n    //   data.append(\"descriptions\", description);\n    //   data.append(\"servings\", serving);\n    //   data.append(\"prepTime\", prepTime);\n    //   data.append(\"cookTime\", cookTime);\n    //   await axios.post(\"http://localhost:3001/recipes\", data);\n    //   console.log(\"success\");\n    // } catch (error) {\n    //   console.log(error);\n    // }\n  };\n  return (\n    <form\n      onSubmit={handleOnSubmit}\n      className=\"container d-flex flex-column mt-3\"\n    >\n      <div className=\"col-9 mb-3 mx-auto\">\n        <label htmlFor=\"title\" className=\"fw-bold form-label\">\n          Title\n        </label>\n        <input\n          type=\"text\"\n          name=\"title\"\n          className=\"form-control\"\n          id=\"title\"\n          onChange={e => setTitle(e.target.value)}\n        />\n      </div>\n      <div className=\"col-9 mb-3 mx-auto\">\n        <label htmlFor=\"descriptions\" className=\"fw-bold form-label\">\n          Description\n        </label>\n        <textarea\n          className=\"form-control\"\n          name=\"description\"\n          id=\"descriptions\"\n          rows=\"3\"\n          onChange={e => setDescription(e.target.value)}\n        ></textarea>\n      </div>\n      <div className=\"row mb-3 col-9 mx-auto\">\n        <div className=\"col\">\n          <label htmlFor=\"Servings\" className=\"fw-bold form-label\">\n            Servings:\n          </label>\n          <input\n            type=\"text\"\n            name=\"servings\"\n            className=\"form-control\"\n            id=\"Servings\"\n            onChange={e => setServing(e.target.value)}\n          />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"PrepTime\" className=\"fw-bold form-label\">\n            Preperation Time:\n          </label>\n          <input\n            type=\"text\"\n            name=\"prepTime\"\n            className=\"form-control\"\n            id=\"PrepTime\"\n            onChange={e => setPrepTime(e.target.value)}\n          />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"CookTime\" className=\"fw-bold form-label\">\n            Cooking Time:\n          </label>\n          <input\n            type=\"text\"\n            name=\"cookTime\"\n            className=\"form-control\"\n            id=\"CookTime\"\n            onChange={e => setCookTime(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"row mb-3 col-9 mx-auto\">\n        <label htmlFor=\"Ingredients\" className=\"fw-bold form-label\">\n          Ingredients:\n        </label>\n      </div>\n\n      <div className=\"row mb-3 col-9 mx-auto\">\n        <div className=\"col \">\n          <label htmlFor=\"amount\" className=\"form-label\">\n            Amount\n          </label>\n          <input\n            type=\"text\"\n            name=\"amount\"\n            className=\"form-control\"\n            id=\"amount\"\n          />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"measurement\" className=\"form-label\">\n            Measurement:\n          </label>\n          <input\n            type=\"text\"\n            name=\"measurements\"\n            className=\"form-control\"\n            id=\"measurement\"\n          />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"name\" className=\"form-label\">\n            Name:\n          </label>\n          <input type=\"text\" name=\"name\" className=\"form-control\" id=\"name\" />\n        </div>\n      </div>\n\n      {inputs}\n      <button\n        className=\"btn btn-success col-3 mx-auto\"\n        onClick={() => handleAddMoreIngredient()}\n      >\n        Add Ingredients\n      </button>\n      <div className=\"row mb-3 col-9 mx-auto\">\n        <label htmlFor=\"Ingredients\" className=\"fw-bold form-label\">\n          Directions:\n        </label>\n      </div>\n\n      <div className=\"row mb-3 col-9 mx-auto\">\n        <div className=\"col-9\">\n          <label htmlFor=\"Instructions\" className=\"form-label\">\n            Instructions:\n          </label>\n          <input\n            type=\"text\"\n            name=\"instructions\"\n            className=\"form-control\"\n            id=\"Instructions\"\n          />\n        </div>\n        <div className=\"col-3\">\n          <label htmlFor=\"optional\" className=\"form-label\">\n            Optional\n          </label>\n          <select\n            className=\"form-select\"\n            name=\"optional\"\n            id=\"optional\"\n            aria-label=\"Default select example\"\n          >\n            <option defaultValue>Open this select menu</option>\n            <option value=\"true\">True</option>\n            <option value=\"false\">False</option>\n          </select>\n        </div>\n      </div>\n      {instructions}\n      <button\n        className=\"btn btn-success col-3 mx-auto\"\n        onClick={() => handleMoreInstructions()}\n      >\n        Add Instructions\n      </button>\n\n      <input className=\"btn btn-primary col-3\" type=\"submit\" value=\"Add\" />\n    </form>\n  );\n};\n\nexport default RecipeAdd;\n",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":9,"column":6,"nodeType":"72","endLine":9,"endColumn":8,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":13},{"ruleId":"74","severity":1,"message":"78","line":7,"column":10,"nodeType":"76","messageId":"77","endLine":7,"endColumn":15},{"ruleId":"74","severity":1,"message":"79","line":8,"column":10,"nodeType":"76","messageId":"77","endLine":8,"endColumn":21},{"ruleId":"74","severity":1,"message":"80","line":9,"column":10,"nodeType":"76","messageId":"77","endLine":9,"endColumn":17},{"ruleId":"74","severity":1,"message":"81","line":10,"column":10,"nodeType":"76","messageId":"77","endLine":10,"endColumn":18},{"ruleId":"74","severity":1,"message":"82","line":11,"column":10,"nodeType":"76","messageId":"77","endLine":11,"endColumn":18},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'specialMatch'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'title' is assigned a value but never used.","'description' is assigned a value but never used.","'serving' is assigned a value but never used.","'prepTime' is assigned a value but never used.","'cookTime' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [specialMatch]",{"range":"88","text":"89"},[255,257],"[specialMatch]"]